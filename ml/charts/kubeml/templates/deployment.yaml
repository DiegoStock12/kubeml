{{/*---*/}}
{{/*apiVersion: v1*/}}
{{/*kind: Namespace*/}}
{{/*metadata:*/}}
{{/*  name: {{.Values.namespace}}*/}}
{{/*  labels:*/}}
{{/*    name: kubeml*/}}
{{/*    chart: "{{.Chart.Name}}-{{.Chart.Version}}"*/}}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kubeml-pod-admin-role
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - create
      - delete
      - watch
      - patch

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubeml-ps
  namespace: {{.Release.Namespace}}

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: kubeml-pod-admin
  namespace: {{.Release.Namespace }}
subjects:
  - kind: ServiceAccount
    name: kubeml-ps
    namespace: {{.Release.Namespace}}
roleRef:
  kind: ClusterRole
  name: kubeml-pod-admin-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    svc: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: controller
  template:
    metadata:
      labels:
        svc: controller
    spec:
      containers:
        - name: controller
          image:  "{{.Values.image}}:{{.Values.kubemlVersion}}"
          command: ["/kubeml"]
          args: ["--controllerPort", "9090"]
          readinessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 1
            periodSeconds: 1
            failureThreshold: 30
          livenessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 35
            periodSeconds: 5
          ports:
            - containerPort: 9090
              name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    svc: scheduler
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: scheduler
  template:
    metadata:
      labels:
        svc: scheduler
    spec:
      containers:
        - name: scheduler
          image: "{{.Values.image}}:{{.Values.kubemlVersion}}"
          command: ["/kubeml"]
          args: ["--schedulerPort", "9090"]
          readinessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 1
            periodSeconds: 1
            failureThreshold: 30
          livenessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 35
            periodSeconds: 5
          ports:
            - containerPort: 9090
              name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: parameter-server
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    svc: parameter-server
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: parameter-server
  template:
    metadata:
      labels:
        svc: parameter-server
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: parameter-server
          image: "{{.Values.image}}:{{.Values.kubemlVersion}}"
          command: ["/kubeml"]
          args: ["--psPort", "9090"]
          readinessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 1
            periodSeconds: 1
            failureThreshold: 30
          livenessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 35
            periodSeconds: 5
          ports:
            - containerPort: 8080
              name: metrics
            - containerPort: 9090
              name: http
      serviceAccountName: kubeml-ps

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage
  labels:
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    svc: storage
spec:
  replicas: 1
  selector:
    matchLabels:
      svc: storage
  template:
    metadata:
      labels:
        svc: storage
    spec:
      containers:
        - name: storage
          image: "{{.Values.storageImage}}:latest"
          readinessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 1
            periodSeconds: 1
            failureThreshold: 30
          livenessProbe:
            httpGet:
              path: "/health"
              port: 9090
            initialDelaySeconds: 35
            periodSeconds: 5
          ports:
            - containerPort: 9090
              name: http